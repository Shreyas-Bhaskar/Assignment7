package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import model.FlexiblePortfolioInterface;
import model.StockInterface;
import view.PortfolioGUIView;
import view.StockGUIView;

/**
 * This is a controller specifically designed to handle the interactions between the portfolio GUI
 * view and the portfolio model. It listens for user actions performed in the GUI and updates the
 * model or the view accordingly.
 */
public class PortfolioGUIController extends AbstractController implements ActionListener {

  private final FlexiblePortfolioInterface portfolio;

  private final PortfolioGUIView view;

  /**
   * Constructs a PortfolioGUIController with references to the portfolio model and the
   * portfolio view.
   * This setup facilitates communication between the model and the view.
   *
   * @param portfolio the model that holds the portfolio data
   * @param view      the view that displays the portfolio data to the user
   */
  public PortfolioGUIController(FlexiblePortfolioInterface portfolio, PortfolioGUIView view) {
    this.portfolio = portfolio;
    this.view = view;
  }

  /**
   * Initializes the main menu by setting this controller as the action listener for GUI events
   * and making the view visible. This method prepares the user interface for interaction.
   */
  public void mainMenu() {
    this.view.setButtonListener(this);
    this.view.makeVisible();
  }

  /**
   * Handles action events generated by the user interface. Depending on the user's action,
   * it performs operations such as buying or selling stocks, displaying portfolio composition,
   * calculating the portfolio's value or cost basis, and inspecting individual stocks.
   *
   * @param e the action event that occurred in the user interface
   */
  @Override
  public void actionPerformed(ActionEvent e) {
    String[] stockList = portfolio.listStocks().toArray(new String[0]);
    System.out.println(portfolio.listStocks());
    System.out.println(stockList);
    String date = view.getDate();
    String buyDate = view.getBuyDate();
    String stock = view.getQuantity();
    switch (e.getActionCommand()) {
      case "Buy Stock":
        if ("".equals(buyDate)) {
          view.displayMessage("Enter a Date");
        } else if (checkDate(buyDate)) {
          try {
            int quantity = Integer.parseInt(stock);
            view.displayMessage(portfolio.buyExisting(view.getStockSymbol() + 1, buyDate, quantity));
          } catch (NumberFormatException msg) {
            view.displayMessage("Invalid Quantity");
          }
        } else {
          view.displayMessage("Enter Valid Date");
        }
        break;
      case "Sell Stock":
        if ("".equals(buyDate)) {
          view.displayMessage("Enter a Date");
        } else if (checkDate(buyDate)) {
          try {
            int quantity = Integer.parseInt(stock);
            view.displayMessage(portfolio.sellExisting(view.getStockSymbol() + 1, buyDate, quantity));
          } catch (NumberFormatException msg) {
            view.displayMessage("Invalid Quantity");
          }
        } else {
          view.displayMessage("Enter Valid Date");
        }
        break;
      case "Composition":
        view.displayMessage(portfolio.composition());
        break;
      case "Value":
        if (date.isEmpty()) {
          view.displayMessage("Enter a Date");
        } else if (checkDate(date)) {
          view.displayMessage(portfolio.value(date));
        } else {
          view.displayMessage("Enter Valid Date");
        }
        break;
      case "Cost Basis":
        if (date.isEmpty()) {
          view.displayMessage("Enter a Date");
        } else if (checkDate(date)) {
          view.displayMessage(portfolio.costBasis(date));
        } else {
          view.displayMessage("Enter Valid Date");
        }
        break;
      case "Inspect Stock":
        int num = view.getStockOption();
        try {
          StockInterface stockModel = portfolio.inspectStock(num + 1);
          StockGUIView stockView = new StockGUIView(stockList[num]);
          StockGUIController controller = new StockGUIController(stockModel, stockView);
          controller.mainMenu();
        } catch (Exception ex) {
          throw new RuntimeException(ex);
        }
        break;
      default:
        break;
    }
  }
}
