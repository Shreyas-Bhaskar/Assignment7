package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import model.FlexibleManagerInterface;
import model.FlexiblePortfolioInterface;
import model.Strategy;
import view.GUIView;
import view.PortfolioGUIView;

/**
 * This class represents the controller in an MVC architecture, responsible for
 * handling user input and coordinating interactions between the view and the model.
 */
public class GUIController extends AbstractController implements ActionListener {
  private final FlexibleManagerInterface model;
  private final GUIView view;

  /**
   * Constructs a Controller object with specified model and view.
   *
   * @param model the model interface to interact with the data layer
   * @param view  the view interface to interact with the user interface
   */
  public GUIController(FlexibleManagerInterface model, GUIView view) {
    this.model = model;
    this.view = view;
  }

  /**
   * Initializes the main menu by setting the action listener for buttons
   * and making the view visible to the user. This method prepares the GUI
   * for user interaction.
   */
  public void mainMenu() {
    this.view.setButtonListener(this);
    this.view.makeVisible();
  }

  /**
   * Overrides the actionPerformed method from ActionListener. This method
   * handles all action events generated by the view. It responds to user inputs
   * such as button clicks and coordinates the execution of various operations
   * like creating, managing, and removing portfolios based on the user's selection.
   *
   * @param e the event that occurred
   */
  @Override
  public void actionPerformed(ActionEvent e) {
    String[] fileList = model.returnPortfolioList();
    switch (e.getActionCommand()) {
      case "Save Portfolio":
        String portfolioName = view.getName("Base");
        if (Objects.equals(portfolioName, "")) {
          view.displayMessage("Portfolio Should Have a Name");
          view.removeFields();
        } else {
          try {
            model.createPortfolio(portfolioName);
            // try catch in create portfolio, invalid throws error
            List<String> symbols = view.getSymbols("Base");
            List<String> dates = view.getDates("Base");
            List<String> quantities = view.getQuantities();
            int count = view.getCount("Base");
            if ((count != 0) &&
                    (symbols.size() == count) &&
                    (dates.size() == count) &&
                    (quantities.size() == count)) {
              if (validateInputs(symbols, dates, quantities)) {
                for (int i = 0; i < view.getCount("Base"); i++) {
                  model.addStock(symbols.get(i), Integer.parseInt(quantities.get(i)), dates.get(i));
                }
                model.savePortfolio();
                view.displayMessage(portfolioName + " Portfolio Created");
                view.removeFields();
              } else {
                view.displayMessage("Invalid Inputs in Stock Symbol, Date or Quantity");
                view.removeFields();
              }

            } else {
              view.displayMessage("A Portfolio Must Have Stocks");
              view.removeFields();
            }
          } catch (Exception msg) {
            view.displayMessage("Invalid Name");
            view.removeFields();
          }
        }


        break;
      case "Save DAC Portfolio":
        String portfolioNameDAC = view.getName("DAC");
        if (Objects.equals(portfolioNameDAC, "")) {
          view.displayMessage("Portfolio Should Have a Name");
          view.removeFields();
        } else {
          try {
            model.createPortfolio(portfolioNameDAC);
            int amountDAC = Integer.parseInt(view.getAmounts("DAC"));
            // try catch in create portfolio, invalid throws error
            List<String> symbols = view.getSymbols("DAC");
            List<String> dates = view.getDates("DAC");
            List<String> percentages = view.getPercents("DAC");
            int count = view.getCount("DAC");
            if ((count != 0) &&
                    (symbols.size() == count) &&
                    (dates.size() == count) &&
                    (percentages.size() == count)) {
              if (validateInputs(symbols, dates, percentages)) {
                List<Integer> percents = new ArrayList<>();
                for (String num : percentages) {
                  percents.add(Integer.parseInt(num));
                }
                if (percents.stream().reduce(0, Integer::sum) == 100) {
                  for (int i = 0; i < view.getCount("DAC"); i++) {
                    model.addStock(symbols.get(i),
                            (float) (amountDAC / 100) * Integer.parseInt(percentages.get(i)),
                            dates.get(i));
                  }
                  model.savePortfolio();
                  view.displayMessage(portfolioNameDAC + " Portfolio Created");
                  view.removeFields();
                } else {
                  view.displayMessage("Percentages do not add upto 100");
                  view.removeFields();
                }
              } else {
                view.displayMessage("Invalid Inputs in Stock Symbol, Date or Percentage");
                view.removeFields();
              }
            } else {
              view.displayMessage("A Portfolio Must Have Stocks");
              view.removeFields();
            }
          } catch (NumberFormatException msg) {
            view.displayMessage("Invalid Amount");
          } catch (Exception msg) {
            view.displayMessage("Invalid Name");
            view.removeFields();
          }
        }
        view.removeFields();
        break;
      case "Save Strategy Portfolio":
        String portfolioNameStrat = view.getName("Strat");
        if (Objects.equals(portfolioNameStrat, "")) {
          view.displayMessage("Portfolio Should Have a Name");
          view.removeFields();
        } else {
          try {
            model.createPortfolio(portfolioNameStrat);
            int amountStrat = Integer.parseInt(view.getAmounts("Strat"));
            int period = Integer.parseInt(view.getPeriod());
            // try catch in create portfolio, invalid throws error
            List<String> symbols = view.getSymbols("Strat");
            List<String> dates = view.getDates("Strat");
            List<String> percentages = view.getPercents("Strat");
            int count = view.getCount("Strat");
            if ((count != 0) &&
                    (symbols.size() == count) &&
                    (dates.size() == count) &&
                    (percentages.size() == count)) {
              List<String> date = new ArrayList<>();
              date.add(dates.get(0));
              if (dates.get(1).equals("")) {
                dates.set(1, "1");
              } else {
                SimpleDateFormat parser = new SimpleDateFormat("yyyy-MM-dd");
                parser.setLenient(false);
                try {
                  parser.parse(dates.get(1));
                } catch (Exception msg) {
                  view.displayMessage("Invalid End Date");
                  view.removeFields();
                }
              }
              if (validateInputs(symbols, date, percentages)) {
                List<Integer> percents = new ArrayList<>();
                for (String num : percentages) {
                  percents.add(Integer.parseInt(num));
                }
                if (percents.stream().reduce(0, Integer::sum) == 100) {
                  List<Float> prices = new ArrayList<>();
                  for (int i = 0; i < count; i++) {
                    prices.add((float) (amountStrat / 100) * percents.get(i));
                  }
                  Strategy strategy = new Strategy(dates.get(0), dates.get(1), period,
                          symbols, prices);
                  strategy.saveStrategy(portfolioNameStrat);
                  for (int i = 0; i < count; i++) {
                    model.addStock(symbols.get(i), prices.get(i), dates.get(0));
                  }
                  model.savePortfolio();
                  view.displayMessage(portfolioNameStrat + " Portfolio Created");
                  view.removeFields();
                } else {
                  view.displayMessage("Percentages do not add upto 100");
                  view.removeFields();
                }
              } else {
                view.displayMessage("Invalid Inputs in Stock Symbol, Date or Percentage");
                view.removeFields();
              }
            } else {
              view.displayMessage("A Portfolio Must Have Stocks");
              view.removeFields();
            }
          } catch (NumberFormatException msg) {
            view.displayMessage("Invalid Amount or Period");
          } catch (Exception msg) {
            view.displayMessage("Invalid Name");
            view.removeFields();
          }
        }
        view.removeFields();
        break;
      case "Manage":
        if (fileList == null) {
          view.displayMessage("No Portfolio to Manage");
        }
        int file = view.getPortfolioOption(fileList);
        try {
          FlexiblePortfolioInterface portfolio = model.fetchFlexiblePortfolio(file + 1);
          portfolio.useStrategy();
          String[] stockList = portfolio.listStocks().toArray(new String[0]);
          PortfolioGUIView portfolioView = new PortfolioGUIView(fileList[file], stockList);
          PortfolioGUIController controller = new PortfolioGUIController(portfolio, portfolioView);
          controller.mainMenu();
        } catch (Exception ex) {
          throw new RuntimeException(ex);
        }
        break;
      case "Remove":
        if (fileList == null) {
          view.displayMessage("No Portfolio to Remove");
        }
        try {
          view.displayMessage(model.deletePortfolio(view.getPortfolioOption(fileList) + 1));
        } catch (Exception ex) {
          throw new RuntimeException(ex);
        }
        break;
      case "Update":
        if (fileList == null) {
          view.displayMessage("No Portfolio to Update");
        }
        try {
          view.displayMessage(model.fetchFlexiblePortfolio(
                  view.getPortfolioOption(fileList) + 1).update());
        } catch (Exception ex) {
          throw new RuntimeException(ex);
        }
        break;
      default:
        break;
    }
  }

  /**
   * Validates the input data for creating or updating stock entries in a portfolio.
   * It ensures that the quantity is a valid number and the date is in the correct format.
   * If any validation fails, it returns false; otherwise, it returns true.
   *
   * @param symbols    the list of stock symbols
   * @param dates      the list of dates for each stock entry
   * @param quantities the list of quantities for each stock
   * @return true if all inputs are valid, false otherwise
   */
  private boolean validateInputs(List<String> symbols,
                                 List<String> dates, List<String> quantities) {
    try {
      for (String quantity : quantities) {
        Integer.parseInt(quantity);
      }
    } catch (NumberFormatException e) {
      return false;
    }
    for (String date : dates) {
      if (!checkDate(date)) {
        return false;
      }
    }
    return true;
  }
}
